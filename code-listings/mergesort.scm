(define (split xs)
  (cond ((null? xs) '(() . ()))
        ((eq? 1 (length xs)) `(,xs . ()))
        (else (let* ((x (car xs)) (y (cadr xs))
                     (rest (cddr xs))
                     (splits (split rest))
                     (xs (car splits)) (ys (cdr splits)))
                `(,(cons x xs) . ,(cons y ys))))))

(define (merge xs ys)
  (cond ((null? xs) ys)
        ((null? ys) xs)
        (else (let* ((x (car xs))
                     (y (car ys)))
                (if (<= x y)
                    (cons x (merge (cdr xs) ys))
                    (cons y (merge xs (cdr ys))))))))

(define (mergesort lst)
  (cond ((null? lst) lst)
        ((eq? 1 (length lst)) lst)
        (else (let* ((splits (split lst))
                     (xs (mergesort (car splits)))
                     (ys (mergesort (cdr splits))))
                (merge xs ys)))))

(display (mergesort '(3 2 1 4 5)))
(display "\n")
(display (mergesort '(5 5 3 2 7 9 6 7 1 10 8 4)))
(display "\n")
